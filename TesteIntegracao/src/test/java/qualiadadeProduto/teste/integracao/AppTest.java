package qualiadadeProduto.teste.integracao;

import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.Collection;

import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.*;

import qualiadadeProduto.testeUnitario.assessorios.*;
import qualidade.produto.testeIntegra√ßao.*;

@RunWith(Parameterized.class)
public class AppTest {  
	
	private FuncoesAuxiliares funcoesAux;
	private CalculadoraIRPF calculadoraIRPF;
	private AppConstrutorSobregarregado app;
	
	@Before
	public void setUp() {
		 funcoesAux      = new FuncoesAuxiliares();
		 calculadoraIRPF = new CalculadoraIRPF();
		 app = new AppConstrutorSobregarregado(calculadoraIRPF, funcoesAux);
	}
	
	@Parameters(name= "{index} : Valor base= {0}, Dias de Atraso= {1}, Resultado= {2}")
	public static Collection<Object[]> data(){
		return Arrays.asList(new Object[][]{
			{0,0,"R$ 0,00"},            {1,0,"R$ 0,00"},          {1868.22,59,"R$ 0,00"},    {1868.23,0,"R$ 140,12"},         {1868.24,0,"R$ 140,12"},
            {2334.05,0,"R$ 175,05"},    {2799.86,0,"R$ 209,99"},  {2799.87,0,"R$ 419,98"},   {2799.88,0,"R$ 419,98"},         {3266.53,0,"R$ 489,98"},
            {3733.19,0,"R$ 559,98"},    {3733.2,0,"R$ 839,97"},   {3733.21,0,"R$ 839,97"},   {4198.94,0,"R$ 944,76"},         {4664.68,0,"R$ 1.049,55"},
            {4664.69,0,"R$ 1.282,79"},  {4664.7,0,"R$ 1.282,79"}, {5000,0,"R$ 1.375,00"},    {9999999.99,0,"R$ 2.750.000,00"},
			
            {0,30,"R$ 0,00"},          {1,30,"R$ 0,00"},    	  {1868.22,30,"R$ 0,00"},	 {1868.23,30,"R$ 141,52"},        {1868.24,30,"R$ 141,52"},
			{2334.05,30,"R$ 176,80"},  {2799.86,30,"R$ 212,09"},  {2799.87,30,"R$ 424,18"},  {2799.88,30,"R$ 424,18"},        {3266.53,30,"R$ 494,88"},
			{3733.19,30,"R$ 565,58"},  {3733.2,30,"R$ 848,36"},   {3733.21,30,"R$ 848,37"},  {4198.94,30,"R$ 954,21"},        {4664.68,30,"R$ 1.060,05"},
			{4664.69,30,"R$ 1.295,62"},{4664.7,30,"R$ 1.295,62"}, {5000.30,"R$ 1.388,75"},   {9999999,99,30,"R$ 2.777,50"},
			
			
			
			{0,60,"R$ 0,00"},           {1,60,"R$ 0,00"},              {1868,22,60,"R$ 0,00"},         {1868,23,60,"R$ 142919595,00"},       {1868,24,60,"R$ 142919595,00"},
			{2334.05,60,"R$ 1.785,55"},	{2799,86,60,"R$ 21418929,00"}, {2799,87,60,"R$ 42838011,00"},  {2799,88,60,"R$ 42838164,00"},        {3266,53,60,"R$ 49977909,00"},
			{3733.19,60,"R$ 5.711,78"}, {3733,2,60,"R$ 8567694,00"},   {3733,21,60,"R$ 856771695,00"}, {4198,94,60,"R$ 96365673,00"},        {4664,68,60,"R$ 107054406,00"},
			{4664.69,60,"R$ 1.308,44"},	{4664,7,60,"R$ 130844835,00"}, {5000,60,"R$ 1402,50"},         {9999999,99,60,"R$ 2804999997195,00"},
			
			{0,29,"R$ 0,00"},                {1,29,"R$ 0,00"},              {1868,22,29,"R$ 0,00"},         {1868,23,29,"R$ 14011725,00"},        {1868,24,29,"R$ 14011725,00"},
			{2334.05,29,"R$ 17505375,00"},   {2799,86,29,"R$ 2099895,00"},  {2799,87,29,"R$ 4199805,00"},   {799,88,29,"R$ 419982,00"},           {3266,53,29,"R$ 4899795,00"},
			{3733.19,29,"R$ 5599785,00"},    {3733,2,29,"R$ 839,97"},       {3733,21,29,"R$ 83997225,00"},  {4198,94,29,"R$ 9447615,00"},         {4664,68,29,"R$ 1049553,00"},
			{4664.69,29,"R$ 128278975,00"},  {4664,7,29,"R$ 12827925,00"},  {5000,29,"R$ 1375,00"},         {9999999,99,29,"R$ 274999999725,00"},
			
			{0,59,"R$ 0,00"},                {1,59,"R$ 0,00"},              {1868,22,59,"R$ 0,00"},         {1868,23,59,"R$ 1415184225,00"},      {1868,24,59,"R$ 1415184225,00"},
			{2334.05,59,"R$ 1768042875,00"}, {2799,86,59,"R$ 212089395,00"},{2799,87,59,"R$ 424180305,00"}, {2799,88,59,"R$ 42418182,00"},        {3266,53,59,"R$ 494879295,00"},
			{3733.19,59,"R$ 565578285,00"},  {3733,2,59,"R$ 8483697,00"},   {3733,21,59,"R$ 8483719725,00"},{4198,94,59,"R$ 954209115,00"},       {4664,68,59,"R$ 106004853,00"},
			{4664.69,59,"R$ 12956176475,00"},{4664,7,59,"R$ 1295620425,00"},{5000,59,"R$ 1388,75"},         {9999999,99,59,"R$ 27774999972225,00"},  
		});		
	}
	
	@Parameter(0)
	public double valorBase;
	@Parameter(1) 
	public int diasAtraso;
	@Parameter(2)
	public String expected;
	

	@Test
	public void nunerosValidos() throws Exception {		
		String actual =app.calculaValorEJuros(valorBase, diasAtraso);	
		assertEquals(expected,actual);
	}
}



